title:: HOA Tutorial Exercise 12
summary:: NRT synthesis, working with SynthDefs.
categories:: Libraries>HOA
related:: Guides/HOAguide, Tutorials/HOA_Tutorial_Overview


STRONG:: Previous:::
link::Tutorials/Exercise_11_HOA_NRT_using_scores_and_Buffers::

STRONG:: Next:::
link::Tutorials/Exercise_13_HOA_NRT_conversion_script_N3D_SN3D_FUMA::

The code below is a non-real-time (NRT) script showing how to work with SynthDefs and the Score class for complex algorithmic compositions.
The examples are adapted from the NRT example of the ATK toolkit.


First things first: let's start the sound server, which we configure first to get more audio buses and to have 36 output channels.

code::
s.quit; // quit the server first if it is still running with another configuration.
(
ServerOptions.devices;
s = Server.local;
Server.local = Server.default;
o = Server.local.options; // Get the local server's options
o.numInputBusChannels = 2; // Set Input to number of Inputs
o.numOutputBusChannels = 36; // lets start after chan 36 so as not to see the mic input
o.numAudioBusChannels = 2048;
o.blockSize = 512;
o.numWireBufs = 1024 * 16;
o.memSize = 2.pow(18);
o.sampleRate = 48000;
s.makeWindow;
s.boot;
)
::

Start the oscilloscope showing all the channels for the selected order of the b-format.
code::
(
~order = 3;
~hoaNumChannels = (~order+1).pow(2);
s.scope(~hoaNumChannels); // let's use only two channels as we will monitor it with headphones
)
::

We will first make a SynthDef with a very simple sine grain distributed in th HOA scene.
There is one caveat, since the HOAEncPan is a pseudo Ugen you cannot set the HOA order as a parameter in a SynthDef.
There are two possible workarounds to keep your code flexible: you can change the order and recompile, or in the case of NRT you can render in the maximum order (5 for now in this library) and later extract only the channels from the rendered file for the order you actually need.
code::
(
SynthDef("littleHOAPing",{ arg freq = 440, az = 0, el = 0, rad = 1,dur = 1, amp = 1, out = 0;
    var substrate, envelope, signal, outsig;
	substrate     = Resonz.ar(ClipNoise.ar(100), freq, 0.0001)  ;
	envelope = EnvGen.ar( Env.perc(0.01, freq.reciprocal * dur, 1, -8), 1, doneAction: 2);
	signal   = substrate * envelope;
	// you need to pass the Order as an Integer
	outsig   = HOAEncoder.ar(~order.asInteger, signal, az:az, elev:el, radius:rad);
	OffsetOut.ar(out, outsig)
}).load(s);
)
::


Now you can play the Synth, but you won't hear a properly decoded sound but only the W and the Y channel in the stereo panorama:
code::
Synth(\littleHOAPing, [\freq, 880 * 2, \dur, 20, \amp, 1])
::


So let's make decoder, that is playing the decoded signal on the first 2 channels (0,1) and is listening on channel (2,3,4,5) for a b-format:
code::
HOADecLebedev26.loadHrirFilters(s); // load the HRIR filters first
( // pass the arguments as Integers
~decoderSynth = {Out.ar(0, HOADecLebedev26.ar(~order.asInteger,  In.ar(2, ~hoaNumChannels.asInteger), hrir_Filters:1)) }.play;
)
::

And in order to properly decode the Synth, we need to play it before the ~decoderSynth:
code::
Synth.before(~decoderSynth, \littleHOAPing, [\freq, 1000.rand + 100, \dur, 100, \az, pi.rand2, \el, (pi * 0.5).rand2, \rad, 1, \out, 2]);
::

Then we make a Score and we add to the Score OSC messages invoking the SynthDef we have made earlier.
code::
(
var numNotes, seconds;
numNotes = 1000;  // reduce the number of sine grains if needed
seconds = 15;
~myScore = Score.new();
numNotes.do({|i|
	~myScore = ~myScore.add([i.explin(0.1, numNotes, 0.1, seconds - 5),  // here we calculate the time for each sound event to be played back
		                              [\s_new, //  this is the OSC command sent to the server to invoke a synth
			                           \littleHOAPing, 1000 + i, 0, 0, // the name of the Synth and each Synth needs a unique ID (1000 + i) on the server
			                           \freq, i.linexp(0, numNotes, 500, 5000).rand, // mapping frequency
			                           \az, i.linlin(0,numNotes, -pi*1.5 , pi*1.5).mod(pi), // mapping  azimuth
			                           \el, i.linlin(0,numNotes, -pi, pi), // mapping elevation
		                               \dur, i.linexp(0.0, numNotes, 100, 800), // mapping duration
			                           \amp, i.linlin(0.0, numNotes, 0, -25).dbamp // mapping the amplitude
                                     ]
                     ])
       });
~myScore.add([seconds, [\c_set, 0, 0]]); // finish
)


// look at the first 20 entries in the Score you have created:
~myScore.score.copyRange(0,20).do({|item,i| item.postln;  })
::


Now we can start the NRT synthesis. We will configure the ServerOptions for the NRT server first.
We render the file as float and normalize it once it is written to disk.
code::
(
~nrtOptions = ServerOptions.new;
~nrtOptions.verbosity_(0);  // 0 to see the events as OSCPacket
~nrtOptions.numOutputBusChannels_(~order); // we need 16 channels because it is B-format 3rd order
~nrtOptions.memSize_(8192 * 6400);
~nrtOptions.maxNodes_(1024 * 48);
~nrtOptions.maxSynthDefs_(1024 * 48);

Score.recordNRT(~myScore.score,
	            thisProcess.platform.userHomeDir++"/sonificationHOA-oscFile.txt",
	            thisProcess.platform.userHomeDir++"/sonificationHOA.wav",
	            sampleRate: 44100,
	            headerFormat: "WAV",
	            sampleFormat: "float",
	            options: ~nrtOptions,
	            action: {"DONE".postln;

		SoundFile.normalize(thisProcess.platform.userHomeDir++"/sonificationHOA.wav",
	                thisProcess.platform.userHomeDir++"/sonificationHOA_norm.wav",
	                newHeaderFormat: "WAV",
	                newSampleFormat: "int16");

	}
);
)
::


Now let's listen to the recorded sound file by opening it first:
code::
~hoaSoundFile = Buffer.read(s, thisProcess.platform.userHomeDir++"/sonificationHOA_norm.wav");
::

Now let's make a node that plays back the mukltichannel soundfile as a HOA signal
code::
(
~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaSignal.source = { HPF.ar(PlayBuf.ar( ~hoaSoundFile.numChannels,  ~hoaSoundFile, loop:1  ), 50)   };
~hoaSignal.fadeTime = 1;
)
::


If the ~decoder from above is still there, let's connect (<>>) both:
code::
HOADecLebedev26.loadHrirFilters(s);
(

~decoderOrder = 3; // let's reduce the order
~decoderNumChannels = (~decoderOrder+1).pow(2);

~decoder = NodeProxy.new(s, \audio, 2);
~decoder.source = {var in; in = \in.ar(0!~decoderNumChannels); HOADecLebedev26.ar(~decoderOrder, in, hrir_Filters:1) };
~decoder.fadeTime = 1;
~decoder.play(0, 2);

~hoaSignal <>>  ~decoder;
)
::

Finally, we can delete the files:
code::
File.delete( thisProcess.platform.userHomeDir++"/sonificationHOA-oscFile.txt");
File.delete( thisProcess.platform.userHomeDir++"/sonificationHOA.wav");
File.delete( thisProcess.platform.userHomeDir++"/sonificationHOA_norm.wav");
::


STRONG:: Previous:::
link::Tutorials/Exercise_11_HOA_NRT_using_scores_and_Buffers::

STRONG:: Next:::
link::Tutorials/Exercise_13_HOA_NRT_conversion_script_N3D_SN3D_FUMA::
